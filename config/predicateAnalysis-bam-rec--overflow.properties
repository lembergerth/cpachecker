# ----------------------------------------------------------------------
# This configuration file uses a combination of block abstraction memoisation
# and predicate-analysis to verify recursive procedures.
# ----------------------------------------------------------------------

#include includes/bam-rec.properties

analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

analysis.algorithm.CEGAR = true
cegar.refiner = cpa.predicate.BAMPredicateRefiner

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.overflow.OverflowCPA, cpa.predicate.BAMPredicateCPA


# strategy is very important for recursion!
# MathSAT5 does not support the "tree" strategy
cpa.predicate.refinement.strategy = tree_nested

# use additional symbols, needed for tree-interpolation (for some solvers)
cpa.predicate.useParameterVariables = true
cpa.predicate.useParameterVariablesForGlobals = true

# set abstraction locations according to BAM
cpa.predicate.blk.alwaysAtFunctions = true
cpa.predicate.blk.alwaysAtLoops     = true
cpa.predicate.blk.alwaysAtFunctionCallNodes = true

cpa.predicate.bam.predicateComputer = OCCURRENCE

cpa.predicate.handlePointerAliasing = false

specification = specification/overflow.spc

# cfa simplifications might remove overflows:
cfa.simplifyCfa = false
cfa.simplifyConstExpressions = false

# expressions without live variables can contain overflows, e.g. if they contain literals!
cfa.findLiveVariables = false
overflow.useLiveness = false

# variables classified as irrelevant might be in fact relevant,
# because the added overflow assumptions lead to branching based on them:
cpa.predicate.ignoreIrrelevantVariables = false

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml

overflow.config = predicateAnalysis-bam-rec--overflow.properties
